# -*- coding: utf-8 -*-
"""Apple stock prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oOcI8LWBqTdXZbpzse1Ybk8YHqz0bb3g
"""

import numpy as np
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split 
import matplotlib.pyplot as plt
plt.style.use('bmh')

from google.colab import files
uploaded = files.upload()

#storing the stock price data into a dataframe
df = pd.read_csv('AAPL.csv')
df.head()

#Get the number of trading days
df.shape

df.columns

#Visualize the close price data
plt.figure(figsize = (16,8))
plt.title('Apple')
plt.xlabel('Days')
plt.ylabel('Close Price USD ($)')
plt.plot(df['Close'])
plt.show()

# Get the close price 
df = df[['Close']]
df.head(4)

#Create a variable to predict 'x' days out into the future
future_days = 25 
#Create a new column(target) shifted 'x' units/days up 
df['Prediction'] = df[['Close']].shift(-future_days)
df.head(4)

# create the feature data set (X) and convert it to a numpy array and remove the last 'X' rows/days
X = np.array(df.drop(['Prediction'], 1))[:-future_days]
print(X)

#create the target data set(y) and convert it to a numpy array and get all of the target values except the last 'x' rows
y = np.array(df['Prediction'])[:-future_days]
print(y)

#Split the data into 75% training and 25% testing
x_train, x_test, y_train, y_test = train_test_split(X,y, test_size = 0.25)

#Create the models 
#Create the decision tree regressor model 
tree = DecisionTreeRegressor().fit(x_train, y_train)
#Create the linear regression model 
lr = LinearRegression().fit(x_train, y_train)

#get the last 'x rows of the feature data set
x_future = df.drop(["Prediction"], 1)[-future_days:]
x_future = x_future.tail(future_days)
x_future = np.array(x_future)
x_future

#Show the model tree prediction 
tree_prediction = tree.predict(x_future)
print(tree_prediction)
print()
#show the model linear regression prediction
lr_prediction = lr.predict(x_future)
print(lr_prediction)

#visualize the data 
predictions = lr_prediction

valid = df[X.shape[0]:]
valid['Predictions'] = predictions
plt.figure(figsize=(16,8))
plt.title('Model')
plt.xlabel('Days')
plt.ylabel('Close Price USD ($)')
plt.plot(df['Close'])
plt.plot(valid[['Close', 'Predictions']])
plt.legend(['Orig', 'Val', 'Pred'])
plt.show()